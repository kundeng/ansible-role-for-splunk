---
# Infrastructure Preparation - SSH Setup
# Sets up SSH connectivity between ansible-controller and all Splunk containers

- name: Setup SSH Infrastructure for Infra Scenario
  hosts: all:!git_server
  gather_facts: true
  connection: docker
  become: true
  become_user: root
  vars:
    ansible_connection: docker  # Override inventory SSH setting for prepare phase
  tasks:
    - name: Wait for systemd to be ready
      wait_for:
        path: /run/systemd/system
      when: ansible_service_mgr == "systemd" and inventory_hostname != 'ansible-controller'
      tags: [ssh]

    - name: Define host key directory path
      set_fact:
        lab_ssh_dir: /workspace/testing/.secrets
      run_once: true
      tags: [ssh_keys, controller]

    - name: Check if runner SSH key exists (host bind mount)
      stat:
        path: "{{ lab_ssh_dir }}/id_rsa"
      register: runner_key_stat
      run_once: true
      tags: [ssh_keys, controller]

    - name: Assert host SSH keypair exists (run task setup if missing)
      assert:
        that:
          - runner_key_stat.stat.exists | default(false)
        fail_msg: |
          Required SSH keypair not found at {{ lab_ssh_dir }}/id_rsa. Run:
            task -d testing setup
          This provisions host-side secrets and builds images.
      run_once: true
      tags: [ssh_keys, controller]

    - name: Check if ansible password file exists on host
      stat:
        path: "{{ lab_ssh_dir }}/ansible_password"
      register: ansible_pw_stat
      run_once: true
      tags: [controller, ssh]

    - name: Assert ansible password file exists on host
      assert:
        that:
          - ansible_pw_stat.stat.exists | default(false)
        fail_msg: |
          Required file missing: {{ lab_ssh_dir }}/ansible_password. Run:
            task -d testing setup
          This provisions host-side secrets and builds images.
      run_once: true
      tags: [controller, ssh]

    - name: Read ansible password from host secrets file
      slurp:
        src: "{{ lab_ssh_dir }}/ansible_password"
      register: ansible_pw_file
      run_once: true
      tags: [controller, ssh]

    - name: Set ansible_plain_password fact
      set_fact:
        ansible_plain_password: "{{ (ansible_pw_file.content | b64decode).strip() }}"
      run_once: true
      tags: [controller, ssh]

    - name: Set up SSH infrastructure for all Splunk hosts
      tags: [ssh_keys]
      block:
        # Critical step: Remove /run/nologin to allow non-root logins
        - name: Remove /run/nologin if it exists (prevent login denials)
          file:
            path: /run/nologin
            state: absent
          when: inventory_hostname != 'ansible-controller'

        # Critical step: Ensure systemd-user-sessions is started
        # This service removes /run/nologin on boot
        - name: Ensure systemd-user-sessions is enabled and started
          systemd:
            name: systemd-user-sessions
            state: started
            enabled: true
          when: inventory_hostname != 'ansible-controller' and ansible_service_mgr == 'systemd' and ansible_distribution != 'AlmaLinux'

        # Start SSH service
        - name: Start SSH service
          systemd:
            name: "{{ 'sshd' if ansible_os_family == 'RedHat' else 'ssh' }}"
            state: started
            enabled: true
          when: inventory_hostname != 'ansible-controller'

        # NOTE: ansible user and sudo already configured in Dockerfile base images
        # No need to recreate user or configure sudo - this was causing PAM conflicts

        - name: Create ansible user SSH directory
          file:
            path: /home/ansible/.ssh
            state: directory
            owner: ansible
            group: ansible
            mode: '0700'

    - name: Fetch SSH keys from host bind mount (run once)
      slurp:
        src: "{{ item }}"
      loop:
        - "{{ lab_ssh_dir }}/id_rsa"
        - "{{ lab_ssh_dir }}/id_rsa.pub"
      register: runner_keys
      run_once: true
      tags: [controller, ssh_keys]

    - name: Extract runner key contents (run once)
      set_fact:
        runner_private_key: "{{ (runner_keys.results | selectattr('item','equalto', lab_ssh_dir + '/id_rsa') | first).content | b64decode }}"
        runner_public_key: "{{ (runner_keys.results | selectattr('item','equalto', lab_ssh_dir + '/id_rsa.pub') | first).content | b64decode }}"
      run_once: true
      tags: [controller, ssh_keys]

    - name: Set up SSH infrastructure for all hosts
      block:
        - name: Copy SSH public key to authorized_keys
          copy:
            content: "{{ runner_public_key }}"
            dest: /home/ansible/.ssh/authorized_keys
            owner: ansible
            group: ansible
            mode: '0600'

        - name: Configure SSH client settings
          blockinfile:
            path: /home/ansible/.ssh/config
            create: true
            owner: ansible
            group: ansible
            mode: '0600'
            block: |
              Host *
                StrictHostKeyChecking no
                UserKnownHostsFile /dev/null
                LogLevel ERROR

        - name: Ensure sshd server allows pubkey and password auth and uses PAM (RedHat family)
          lineinfile:
            path: /etc/ssh/sshd_config
            regexp: '^\s*{{ item.key }}\s+'
            line: '{{ item.key }} {{ item.value }}'
            state: present
            create: no
            backrefs: false
          loop:
            - { key: 'UsePAM', value: 'yes' }
            - { key: 'PubkeyAuthentication', value: 'yes' }
            - { key: 'PasswordAuthentication', value: 'yes' }
          when: ansible_os_family == 'RedHat' and ansible_distribution != 'AlmaLinux'

        # SSH configuration is now handled in the Dockerfile

        - name: Create test data directories
          file:
            path: "{{ item }}"
            state: directory
            mode: '0755'
          loop:
            - /var/log/test-data
            - /tmp/test-logs
          when: inventory_hostname in groups['uf'] and ansible_distribution != 'Ubuntu' and ansible_distribution != 'AlmaLinux'

    - name: Permit user logins on systemd hosts (clear pam_nologin gate)
      block:
        - name: Remove /run/nologin if present
          file:
            path: /run/nologin
            state: absent

        - name: Start systemd-user-sessions (opens user logins)
          systemd:
            name: systemd-user-sessions
            state: started
            daemon_reload: true
          when: ansible_distribution != 'AlmaLinux'

        - name: Enable systemd-user-sessions at boot (ignore if static)
          systemd:
            name: systemd-user-sessions
            enabled: true
      when: ansible_service_mgr == "systemd"

    - name: Configure Ansible Controller
      block:
        # Start SSH service on controller
        - name: Start SSH service on controller
          systemd:
            name: "{{ 'ssh' if ansible_os_family == 'Debian' else 'sshd' }}"
            state: started
            enabled: true
          tags: [controller, ssh]

        # Configure SSH for ansible user
        - name: Ensure ansible SSH directory on controller
          file:
            path: /home/ansible/.ssh
            state: directory
            mode: '0700'
            owner: ansible
            group: ansible
          tags: [controller, ssh_keys]

        # Configure ttyd service to run as ansible user with credential authentication
        - name: Create ttyd service file
          copy:
            dest: /etc/systemd/system/ttyd.service
            content: |
              [Unit]
              Description=ttyd Web Terminal Service
              After=network.target

              [Service]
              Type=simple
              User=ansible
              Group=ansible
              WorkingDirectory=/home/ansible
              ExecStart=/usr/local/bin/ttyd -p 7681 -i 127.0.0.1 --writable -t fontSize=14 -t theme={"background":"#000000"} -c ansible:{{ ansible_plain_password }} /bin/bash
              Restart=always
              RestartSec=3
              StandardOutput=syslog
              StandardError=syslog
              SyslogIdentifier=ttyd

              [Install]
              WantedBy=multi-user.target
          tags: [controller, ttyd]

        - name: Enable ttyd service
          systemd:
            name: ttyd
            enabled: yes
            daemon_reload: yes
          tags: [controller, ttyd]

        - name: Read private key from host path
          slurp:
            src: "{{ lab_ssh_dir }}/id_rsa"
          register: runner_priv
          run_once: true
          tags: [controller, ssh_keys]

        - name: Read public key from host path
          slurp:
            src: "{{ lab_ssh_dir }}/id_rsa.pub"
          register: runner_pub
          run_once: true
          tags: [controller, ssh_keys]

        - name: Copy SSH keys to controller /home/ansible/.ssh
          copy:
            content: "{{ item.content }}"
            dest: "{{ item.dest }}"
            mode: "{{ item.mode }}"
            owner: ansible
            group: ansible
          loop:
            - { content: "{{ runner_priv.content | b64decode }}", dest: /home/ansible/.ssh/id_rsa, mode: '0600' }
            - { content: "{{ runner_pub.content | b64decode }}", dest: /home/ansible/.ssh/id_rsa.pub, mode: '0644' }
          tags: [controller, ssh_keys]

        - name: Install controller authorized_keys
          copy:
            content: "{{ runner_public_key }}"
            dest: /home/ansible/.ssh/authorized_keys
            mode: '0600'
            owner: ansible
            group: ansible
          tags: [controller, ssh_keys]

        - name: Create ansible controller SSH config
          copy:
            content: |
              Host *
                StrictHostKeyChecking no
                UserKnownHostsFile /dev/null
                LogLevel ERROR
            dest: /home/ansible/.ssh/config
            mode: '0600'
            owner: ansible
            group: ansible
          tags: [controller, ssh_keys]


        # ttyd and nginx are now configured in the Dockerfile

        - name: Ensure nginx sites directories exist
          file:
            path: "{{ item }}"
            state: directory
            mode: '0755'
          with_items:
            - /etc/nginx/sites-available
            - /etc/nginx/sites-enabled
          tags: [controller, nginx]

        - name: Disable default nginx site if present
          file:
            path: /etc/nginx/sites-enabled/default
            state: absent
          tags: [controller, nginx]

        - name: Ensure ttyd is running
          systemd:
            name: ttyd
            state: started
            enabled: true
          tags: [controller, ttyd]

        - name: Ensure nginx is running
          systemd:
            name: nginx
            state: started
            enabled: true
          tags: [controller, nginx]

      when: inventory_hostname == 'ansible-controller'
      tags: [controller]

- name: Bootstrap Git Server
  hosts: git_server
  gather_facts: false  # Git server doesn't need Python3/Ansible management
  connection: docker   # Use docker connection, not SSH
  vars:
    ansible_connection: docker  # Override inventory SSH settings
  tasks:
    - name: Check Gitea container is running (no Python3 needed)
      raw: echo 'Git server container running - Gitea will auto-start'

    - name: Create test repositories (placeholder)
      raw: "echo 'Gitea ready for app repository testing'"