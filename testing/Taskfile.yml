# Splunk Testing Framework Task Runner
# Architecture: 2-phase testing with bootstrap infrastructure + Splunk role testing
# Requirements: Docker only (all tools containerized)

version: '3'

env:

vars:
  PROJECT_ROOT: '{{.TASKFILE_DIR}}/..'
  DOCKER_IMAGES_DIR: '{{.TASKFILE_DIR}}/docker-images'

tasks:
  default:
    desc: Show available tasks
    cmds:
      - task --list
      
  # === SYSTEM UTILITIES ===
  sys:setup:
    desc: Setup environment (secrets and images)
    cmds:
      - task: sys:secrets
      - task: sys:imaging
      - echo "‚úÖ Environment setup complete!"

  sys:imaging:
    desc: Build all Docker images required for testing
    cmds:
      - echo "üîß Building Splunk testing framework images..."
      - docker build -t splunk-base-almalinux9:latest {{.DOCKER_IMAGES_DIR}}/almalinux9-systemd-sshd/
      - docker build -t splunk-base-ubuntu2204:latest {{.DOCKER_IMAGES_DIR}}/ubuntu2204-systemd-sshd/
      - docker build -t splunk-ansible-controller:latest {{.DOCKER_IMAGES_DIR}}/ansible-controller/
      - docker build -t splunk-git-server:latest {{.DOCKER_IMAGES_DIR}}/gitlab/
      - docker build -t molecule-runner:latest {{.DOCKER_IMAGES_DIR}}/molecule-runner/
      - echo "‚úÖ All images built successfully!"
      
  sys:download:
    desc: Download Splunk binaries for testing
    dir: "{{.PROJECT_ROOT}}/testing"
    cmds:
      - mkdir -p software
      - |
        if [ ! -f software/splunk-9.0.4-de405f4a7979-Linux-x86_64.tgz ]; then
          echo "üì• Downloading Splunk Enterprise..."
          curl -L -o software/splunk-9.0.4-de405f4a7979-Linux-x86_64.tgz "https://download.splunk.com/products/splunk/releases/9.0.4/linux/splunk-9.0.4-de405f4a7979-Linux-x86_64.tgz" || echo "‚ö†Ô∏è Download failed, please download manually"
        else
          echo "‚úÖ Splunk Enterprise already downloaded"
        fi
      - |
        if [ ! -f software/splunkforwarder-9.0.4-de405f4a7979-Linux-x86_64.tgz ]; then
          echo "üì• Downloading Splunk Universal Forwarder..."
          curl -L -o software/splunkforwarder-9.0.4-de405f4a7979-Linux-x86_64.tgz "https://download.splunk.com/products/universalforwarder/releases/9.0.4/linux/splunkforwarder-9.0.4-de405f4a7979-Linux-x86_64.tgz" || echo "‚ö†Ô∏è Download failed, please download manually"
        else
          echo "‚úÖ Splunk Universal Forwarder already downloaded"
        fi

  sys:secrets:
    desc: Create testing/.secrets directory with SSH keys and password
    dir: "{{.PROJECT_ROOT}}/testing"
    cmds:
      - mkdir -p .secrets && chmod 700 .secrets
      - test -f .secrets/id_rsa || ssh-keygen -t rsa -b 2048 -N '' -C 'splunk-test-cluster' -f .secrets/id_rsa
      - test -f .secrets/ansible_password || (tr -dc 'A-Za-z0-9' </dev/urandom | head -c 20 > .secrets/ansible_password)
      - chmod 600 .secrets/id_rsa .secrets/ansible_password
      - chmod 644 .secrets/id_rsa.pub

  # === LAB SCENARIO ===
  lab:
    desc: Create and setup complete lab infrastructure
    cmds:
      - task: sys:setup
      - echo "Creating complete lab infrastructure..."
      - |
        docker run --rm \
          -v /var/run/docker.sock:/var/run/docker.sock \
          -v {{.PROJECT_ROOT}}:/workspace \
          -w /workspace/testing \
          -e HOST_PROJECT_DIRECTORY={{.PROJECT_ROOT}} \
          molecule-runner:latest \
          molecule test -s lab
      - echo "‚úÖ Lab infrastructure ready!"
      - echo "Access web terminal at http://localhost:3000/ttyd"

  lab:create:
    desc: Create lab containers and setup SSH keys
    cmds:
      - task: sys:setup
      - echo "üì¶ Creating lab containers..."
      - |
        docker run --rm \
          -v /var/run/docker.sock:/var/run/docker.sock \
          -v {{.PROJECT_ROOT}}:/workspace \
          -w /workspace/testing \
          -e HOST_PROJECT_DIRECTORY={{.PROJECT_ROOT}} \
          molecule-runner:latest \
          molecule create -s lab

  lab:prepare:
    desc: Prepare lab (runs testing/molecule/lab/prepare.yml)
    cmds:
      - task: sys:setup
      - echo "üß© Preparing lab..."
      - |
        docker run --rm \
          -v /var/run/docker.sock:/var/run/docker.sock \
          -v {{.PROJECT_ROOT}}:/workspace \
          -w /workspace/testing \
          -e HOST_PROJECT_DIRECTORY={{.PROJECT_ROOT}} \
          molecule-runner:latest \
          molecule prepare -s lab
          
  lab:run:
    desc: Create, prepare, and converge lab without destroying containers
    cmds:
      - task: sys:setup
      - echo "üöÄ Creating and setting up lab infrastructure..."
      - task: lab:create
      - task: lab:prepare
      - echo "üîÑ Running converge step..."
      - |
        docker run --rm \
          -v /var/run/docker.sock:/var/run/docker.sock \
          -v {{.PROJECT_ROOT}}:/workspace \
          -w /workspace/testing \
          -e HOST_PROJECT_DIRECTORY={{.PROJECT_ROOT}} \
          molecule-runner:latest \
          molecule converge -s lab
      - echo "‚úÖ Lab infrastructure ready!"
      - echo "Access web terminal at http://localhost:3000/ttyd"

  lab:destroy:
    desc: Destroy lab infrastructure
    cmds:
      - echo "üí• Destroying lab infrastructure..."
      - |
        docker run --rm \
          -v /var/run/docker.sock:/var/run/docker.sock \
          -v {{.PROJECT_ROOT}}:/workspace \
          -w /workspace/testing \
          -e HOST_PROJECT_DIRECTORY={{.PROJECT_ROOT}} \
          molecule-runner:latest \
          molecule destroy -s lab
          
  lab:status:
    desc: Show status of lab containers on the splunk-test-network
    cmds:
      - echo "üìã Containers on splunk-test-network" 
      - docker ps --filter network=splunk-test-network --format 'table {{.Names}}\t{{.Status}}\t{{.Image}}'

  # === DAY0 SCENARIO ===
  day0:
    desc: Day 0 - Deploy Splunk via SSH (initial provisioning)
    cmds:
      - task: sys:setup
      - echo "üöÄ Day 0 - Deploying Splunk (initial provisioning)..."
      - |
        docker run --rm \
          -v /var/run/docker.sock:/var/run/docker.sock \
          -v {{.PROJECT_ROOT}}:/workspace \
          -w /workspace/testing \
          -e HOST_PROJECT_DIRECTORY={{.PROJECT_ROOT}} \
          molecule-runner:latest \
          molecule converge -s day0
      - echo "‚úÖ Day 0 provisioning complete!"

  day0:deploy:
    desc: Day 0 - Deploy Splunk role directly via ansible-playbook (assumes lab exists)
    cmds:
      - echo "üöÄ Day 0 - Deploying Splunk via ansible-playbook..."
      - |
        docker run --rm \
          --network splunk-test-network \
          -v /var/run/docker.sock:/var/run/docker.sock \
          -v {{.PROJECT_ROOT}}:/workspace \
          -w /workspace \
          molecule-runner:latest \
          bash -c "ansible-galaxy collection install community.general && ansible-playbook -i testing/molecule/inventory/hosts.yml playbooks/splunk_install_or_upgrade.yml"

  day0:verify:
    desc: Day 0 - Verify Splunk deployment only
    cmds:
      - echo "üîç Day 0 - Verifying Splunk deployment..."
      - |
        docker run --rm \
          -v /var/run/docker.sock:/var/run/docker.sock \
          -v {{.PROJECT_ROOT}}:/workspace \
          -w /workspace/testing \
          -e HOST_PROJECT_DIRECTORY={{.PROJECT_ROOT}} \
          molecule-runner:latest \
          molecule verify -s day0

  # === DAY1 SCENARIO ===
  day1:
    desc: Day 1 - Operational tasks on running Splunk cluster
    cmds:
      - task: sys:setup
      - echo "üîß Day 1 - Running operational tasks..."
      - |
        docker run --rm \
          -v /var/run/docker.sock:/var/run/docker.sock \
          -v {{.PROJECT_ROOT}}:/workspace \
          -w /workspace/testing \
          -e HOST_PROJECT_DIRECTORY={{.PROJECT_ROOT}} \
          molecule-runner:latest \
          molecule test -s day1
      - echo "‚úÖ Day 1 operations complete!"

  # === DIAGNOSTICS ===
  sys:diag:ttyd:
    desc: Diagnose ttyd and nginx health (host and inside ansible-controller)
    cmds:
      - |
          echo "üåê Host check http://localhost:3000/ttyd"
          if command -v curl >/dev/null 2>&1; then
            curl -sS -o /dev/null -w 'HTTP %{http_code}\n' http://localhost:3000/ttyd || true
          else
            echo "curl not found, skipping host check"
          fi
          
          docker exec ansible-controller bash -c '
            echo "-- systemctl status ttyd --"; systemctl is-enabled ttyd || true; systemctl is-active ttyd || true; systemctl status --no-pager ttyd | sed -n "1,12p" || true
            echo "-- systemctl status nginx --"; systemctl is-enabled nginx || true; systemctl is-active nginx || true; systemctl status --no-pager nginx | sed -n "1,12p" || true
            echo "-- ss -ltnp for port 3000 --"; (ss -ltnp | grep ":3000" || true)
            echo "-- curl localhost:3000 (ttyd backend) --"; (curl -sS -o /dev/null -w "HTTP %{http_code}\n" http://127.0.0.1:3000 || true)
            echo "-- curl localhost:3000/ttyd (nginx proxy) --"; (curl -sS -o /dev/null -w "HTTP %{http_code}\n" http://127.0.0.1:3000/ttyd || true)
            echo "-- nginx configtest --"; nginx -t || true
          '
          
  sys:diag:ssh:
    desc: Test SSH connectivity to all hosts in the lab
    cmds:
      - echo "üîç Testing SSH connectivity to all hosts"
      - |
        docker exec -u ansible ansible-controller bash -c '
          echo "\n=== ANSIBLE PING USING INVENTORY ==="
          ansible -i /workspace/testing/molecule/inventory/hosts.yml full -m ping
          echo "\n=== SSH CONFIG ==="
          cat ~/.ssh/config
          echo "\n=== SSH KEYS ==="
          ls -la ~/.ssh/
          echo "\n=== TESTING SSH CONNECTIONS ==="
          for host in splunk-master splunk-license splunk-fwdmanager splunkapp-prod01 splunkapp-prod02 splunkshc-prod01 splunkshc-prod02 splunk-deploy splunk-uf01; do
            echo "\nTesting SSH to $host:"
            ssh -o StrictHostKeyChecking=no $host "hostname" || echo "Failed to connect to $host"
          done
        '

  # === SYSTEM UTILITIES ===
  sys:controller:
    desc: Start the ansible-controller container and open a shell
    cmds:
      - echo "üöÄ Starting ansible-controller..."
      - |
        docker run -d --rm \
          --name ansible-controller \
          --network splunk-test-network \
          -p 3000:3000 \
          -v {{.PROJECT_ROOT}}:/workspace \
          -v {{.PROJECT_ROOT}}/testing/.secrets:/home/ansible/.secrets \
          -e HOST_PROJECT_DIRECTORY={{.PROJECT_ROOT}} \
          splunk-ansible-controller:latest
      - echo "‚úÖ Controller started!"
      - echo "Access controller at http://localhost:3000/ttyd"
      - docker exec -it ansible-controller bash

  sys:status:
    desc: Show status of all containers on splunk-test-network
    cmds:
      - echo "üìã Containers on splunk-test-network" 
      - docker ps --filter network=splunk-test-network --format 'table {{.Names}}\t{{.Status}}\t{{.Image}}'
      
  sys:reset:
    desc: Reset everything (destroy lab + clean Docker)
    cmds:
      - task: lab:destroy
      - echo "üí• Removing all containers and images..."
      - docker rm -f $(docker ps -a -q) 2>/dev/null || true
      - docker rmi -f $(docker images -q) 2>/dev/null || true
      - docker volume rm splunk-ws 2>/dev/null || true
      - echo "‚úÖ Reset complete!"

  sys:shell:
    desc: "Shell into container (usage - task sys:shell -- container-name)"
    cmds:
      - docker exec -it {{.CLI_ARGS}} bash

  # === WORKFLOWS ===
  workflow:full-test:
    desc: Complete end-to-end test (lab + day0 + day1)
    cmds:
      - task: lab
      - task: day0
      - task: day1
      - echo "üéâ Complete end-to-end testing finished!"

  # === DEVELOPMENT UTILITIES ===
  molecule:shell:
    desc: "Interactive shell in molecule-runner container"
    cmds:
      - |
        docker run --rm -it \
          -v /var/run/docker.sock:/var/run/docker.sock \
          -v {{.PROJECT_ROOT}}:/workspace \
          -w /workspace/testing \
          -e HOST_PROJECT_DIRECTORY={{.PROJECT_ROOT}} \
          molecule-runner:latest \
          bash