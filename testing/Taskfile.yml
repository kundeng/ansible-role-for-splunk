# Splunk Testing Framework Task Runner
# Architecture: Molecule-based scenarios (lab/day0/day1) with containerized execution
# Requirements: Docker only (all tools run in containers)
# Organization: setup:* (environment), lab:* (infrastructure), day0:* (deployment), day1:* (operations), workflow:* (combined cycles)

version: '3'

dotenv: ['.env']

env:

vars:
  PROJECT_ROOT: '{{.TASKFILE_DIR}}/..'
  DOCKER_IMAGES_DIR: '{{.TASKFILE_DIR}}/docker-images'

tasks:
  default:
    desc: Show available tasks
    cmds:
      - task --list
      
  # === ENVIRONMENT SETUP ===
  setup:
    desc: Complete environment setup (secrets + images)
    cmds:
      - task: setup:secrets
      - task: setup:images
      - echo "✅ Environment setup complete!"

  setup:images:
    desc: Build all Docker images required for testing
    cmds:
      - echo "🔧 Building Splunk testing framework images..."
      - docker build -t splunk-base-almalinux9:latest {{.DOCKER_IMAGES_DIR}}/almalinux9-systemd-sshd/
      - docker build -t splunk-base-ubuntu2204:latest {{.DOCKER_IMAGES_DIR}}/ubuntu2204-systemd-sshd/
      - docker build -t splunk-ansible-controller:latest {{.DOCKER_IMAGES_DIR}}/ansible-controller/
      - docker build -t splunk-git-server:latest {{.DOCKER_IMAGES_DIR}}/gitlab/
      - docker build -t molecule-runner:latest {{.DOCKER_IMAGES_DIR}}/molecule-runner/
      - echo "✅ All images built successfully!"

  setup:secrets:
    desc: Create testing/.secrets directory with SSH keys and password
    dir: "{{.PROJECT_ROOT}}/testing"
    cmds:
      - mkdir -p .secrets && chmod 700 .secrets
      - test -f .secrets/id_rsa || ssh-keygen -t rsa -b 2048 -N '' -C 'splunk-test-cluster' -f .secrets/id_rsa
      - test -f .secrets/ansible_password || (tr -dc 'A-Za-z0-9' </dev/urandom | head -c 20 > .secrets/ansible_password)
      - chmod 600 .secrets/id_rsa .secrets/ansible_password
      - chmod 644 .secrets/id_rsa.pub

  download:splunk:
    desc: "Download Splunk binaries for testing (deprecated - use remote URLs)"
    dir: "{{.PROJECT_ROOT}}/testing"
    cmds:
      - echo "⚠️  Download task deprecated - Splunk binaries now fetched via remote URLs in inventory"
      - echo "   See testing/molecule/inventory/group_vars/all.yml"

  # === MOLECULE SCENARIOS ===
  # These map directly to testing/molecule/ scenario directories

  lab:test:
    desc: Run complete lab scenario (create → prepare → converge → verify → destroy)
    cmds:
      - task: setup
      - echo "🧪 Running complete lab scenario..."
      - |
        docker run --rm \
          -v /var/run/docker.sock:/var/run/docker.sock \
          -v {{.PROJECT_ROOT}}:/workspace \
          -w /workspace/testing \
          -e HOST_PROJECT_DIRECTORY={{.PROJECT_ROOT}} \
          molecule-runner:latest \
          molecule test -s lab
      - echo "✅ Lab scenario complete!"
      - echo "Access web terminal at http://localhost:3000/ttyd"

  lab:create:
    desc: Create lab containers (molecule create -s lab)
    cmds:
      - task: setup
      - echo "📦 Creating lab containers..."
      - |
        docker run --rm \
          -v /var/run/docker.sock:/var/run/docker.sock \
          -v {{.PROJECT_ROOT}}:/workspace \
          -w /workspace/testing \
          -e HOST_PROJECT_DIRECTORY={{.PROJECT_ROOT}} \
          molecule-runner:latest \
          molecule create -s lab

  lab:prepare:
    desc: Prepare lab infrastructure (molecule prepare -s lab)
    cmds:
      - task: setup
      - echo "🧩 Preparing lab infrastructure..."
      - |
        docker run --rm \
          -v /var/run/docker.sock:/var/run/docker.sock \
          -v {{.PROJECT_ROOT}}:/workspace \
          -w /workspace/testing \
          -e HOST_PROJECT_DIRECTORY={{.PROJECT_ROOT}} \
          molecule-runner:latest \
          molecule prepare -s lab

  lab:converge:
    desc: Run lab converge (molecule converge -s lab)
    cmds:
      - echo "🔄 Running lab converge..."
      - |
        docker run --rm \
          -v /var/run/docker.sock:/var/run/docker.sock \
          -v {{.PROJECT_ROOT}}:/workspace \
          -w /workspace/testing \
          -e HOST_PROJECT_DIRECTORY={{.PROJECT_ROOT}} \
          molecule-runner:latest \
          molecule converge -s lab
      - echo "✅ Lab converge complete!"

  lab:verify:
    desc: Verify lab deployment (molecule verify -s lab)
    cmds:
      - echo "🔍 Verifying lab deployment..."
      - |
        docker run --rm \
          -v /var/run/docker.sock:/var/run/docker.sock \
          -v {{.PROJECT_ROOT}}:/workspace \
          -w /workspace/testing \
          -e HOST_PROJECT_DIRECTORY={{.PROJECT_ROOT}} \
          molecule-runner:latest \
          molecule verify -s lab

  lab:destroy:
    desc: Destroy lab infrastructure (molecule destroy -s lab)
    cmds:
      - echo "💥 Destroying lab infrastructure..."
      - |
        docker run --rm \
          -v /var/run/docker.sock:/var/run/docker.sock \
          -v {{.PROJECT_ROOT}}:/workspace \
          -w /workspace/testing \
          -e HOST_PROJECT_DIRECTORY={{.PROJECT_ROOT}} \
          molecule-runner:latest \
          molecule destroy -s lab

  lab:status:
    desc: Show status of lab containers
    cmds:
      - echo "📋 Lab containers status:"
      - docker ps --filter network=splunk-test-network --format 'table {{.Names}}\t{{.Status}}\t{{.Image}}'

  day0:test:
    desc: Run complete Day 0 scenario (converge → verify)
    cmds:
      - task: setup
      - echo "🚀 Day 0 - Running complete Splunk deployment scenario..."
      - |
        docker run --rm \
          -v /var/run/docker.sock:/var/run/docker.sock \
          -v {{.PROJECT_ROOT}}:/workspace \
          -w /workspace/testing \
          -e HOST_PROJECT_DIRECTORY={{.PROJECT_ROOT}} \
          molecule-runner:latest \
          molecule test -s day0
      - echo "✅ Day 0 scenario complete!"

  day0:converge:
    desc: Deploy Splunk via SSH (molecule converge -s day0)
    cmds:
      - echo "🚀 Day 0 - Deploying Splunk via SSH..."
      - |
        docker run --rm \
          -v /var/run/docker.sock:/var/run/docker.sock \
          -v {{.PROJECT_ROOT}}:/workspace \
          -w /workspace/testing \
          -e HOST_PROJECT_DIRECTORY={{.PROJECT_ROOT}} \
          molecule-runner:latest \
          molecule converge -s day0
      - echo "✅ Day 0 deployment complete!"

  day0:verify:
    desc: Verify Splunk deployment (molecule verify -s day0)
    cmds:
      - echo "🔍 Day 0 - Verifying Splunk deployment..."
      - |
        docker run --rm \
          -v /var/run/docker.sock:/var/run/docker.sock \
          -v {{.PROJECT_ROOT}}:/workspace \
          -w /workspace/testing \
          -e HOST_PROJECT_DIRECTORY={{.PROJECT_ROOT}} \
          molecule-runner:latest \
          molecule verify -s day0

  day0:playbook:
    desc: Deploy Splunk directly via ansible-playbook (bypasses molecule)
    cmds:
      - echo "🚀 Day 0 - Deploying Splunk via direct ansible-playbook..."
      - |
        docker run --rm \
          --network splunk-test-network \
          -v /var/run/docker.sock:/var/run/docker.sock \
          -v {{.PROJECT_ROOT}}:/workspace \
          -w /workspace \
          molecule-runner:latest \
          bash -c "ansible-galaxy collection install community.general && ansible-playbook -i testing/molecule/inventory/hosts.yml playbooks/splunk_install_or_upgrade.yml"

  day1:test:
    desc: Run complete Day 1 scenario (converge → verify)
    cmds:
      - task: setup
      - echo "🔧 Day 1 - Running complete operations scenario..."
      - |
        docker run --rm \
          -v /var/run/docker.sock:/var/run/docker.sock \
          -v {{.PROJECT_ROOT}}:/workspace \
          -w /workspace/testing \
          -e HOST_PROJECT_DIRECTORY={{.PROJECT_ROOT}} \
          molecule-runner:latest \
          molecule test -s day1
      - echo "✅ Day 1 scenario complete!"

  day1:converge:
    desc: Run Day 1 operations (molecule converge -s day1)
    cmds:
      - echo "🔧 Day 1 - Running operational tasks..."
      - |
        docker run --rm \
          -v /var/run/docker.sock:/var/run/docker.sock \
          -v {{.PROJECT_ROOT}}:/workspace \
          -w /workspace/testing \
          -e HOST_PROJECT_DIRECTORY={{.PROJECT_ROOT}} \
          molecule-runner:latest \
          molecule converge -s day1
      - echo "✅ Day 1 operations complete!"

  day1:verify:
    desc: Verify Day 1 operations (molecule verify -s day1)
    cmds:
      - echo "🔍 Day 1 - Verifying operational tasks..."
      - |
        docker run --rm \
          -v /var/run/docker.sock:/var/run/docker.sock \
          -v {{.PROJECT_ROOT}}:/workspace \
          -w /workspace/testing \
          -e HOST_PROJECT_DIRECTORY={{.PROJECT_ROOT}} \
          molecule-runner:latest \
          molecule verify -s day1

  # === DIAGNOSTICS ===
  diag:terminal:
    desc: "Diagnose ttyd and nginx health"
    cmds:
      - |
          echo "🌐 Host check http://localhost:3000/ttyd"
          if command -v curl >/dev/null 2>&1; then
            curl -sS -o /dev/null -w 'HTTP %{http_code}\n' http://localhost:3000/ttyd || true
          else
            echo "curl not found, skipping host check"
          fi

          docker exec ansible-controller bash -c '
            echo "-- systemctl status ttyd --"; systemctl is-enabled ttyd || true; systemctl is-active ttyd || true; systemctl status --no-pager ttyd | sed -n "1,12p" || true
            echo "-- systemctl status nginx --"; systemctl is-enabled nginx || true; systemctl is-active nginx || true; systemctl status --no-pager nginx | sed -n "1,12p" || true
            echo "-- ss -ltnp for port 3000 --"; (ss -ltnp | grep ":3000" || true)
            echo "-- curl localhost:3000 (ttyd backend) --"; (curl -sS -o /dev/null -w "HTTP %{http_code}\n" http://127.0.0.1:3000 || true)
            echo "-- curl localhost:3000/ttyd (nginx proxy) --"; (curl -sS -o /dev/null -w "HTTP %{http_code}\n" http://127.0.0.1:3000/ttyd || true)
            echo "-- nginx configtest --"; nginx -t || true
          '

  diag:ssh:
    desc: "Test SSH connectivity to all hosts in the lab"
    cmds:
      - echo "🔍 Testing SSH connectivity to all hosts"
      - |
        docker exec -u ansible ansible-controller bash -c '
          echo "\n=== ANSIBLE PING USING INVENTORY ==="
          ansible -i /workspace/testing/molecule/inventory/hosts.yml full -m ping
          echo "\n=== SSH CONFIG ==="
          cat ~/.ssh/config
          echo "\n=== SSH KEYS ==="
          ls -la ~/.ssh/
          echo "\n=== TESTING SSH CONNECTIONS ==="
          for host in splunk-master splunk-license splunk-fwdmanager splunkapp-prod01 splunkapp-prod02 splunkshc-prod01 splunkshc-prod02 splunk-deploy splunk-uf01; do
            echo "\nTesting SSH to $host:"
            ssh -o StrictHostKeyChecking=no $host "hostname" || echo "Failed to connect to $host"
          done
        '

  # === UTILITIES ===
  controller:start:
    desc: "Start the ansible-controller container"
    cmds:
      - echo "🚀 Starting ansible-controller..."
      - |
        docker run -d --rm \
          --name ansible-controller \
          --network splunk-test-network \
          -p 3000:3000 \
          -v {{.PROJECT_ROOT}}:/workspace \
          -v {{.PROJECT_ROOT}}/testing/.secrets:/home/ansible/.secrets \
          -e HOST_PROJECT_DIRECTORY={{.PROJECT_ROOT}} \
          splunk-ansible-controller:latest
      - echo "✅ Controller started!"
      - echo "Access web terminal at http://localhost:3000/ttyd"

  controller:shell:
    desc: "Shell into ansible-controller container"
    cmds:
      - docker exec -it ansible-controller bash

  status:
    desc: Show status of all containers on splunk-test-network
    cmds:
      - echo "📋 Containers on splunk-test-network"
      - docker ps --filter network=splunk-test-network --format 'table {{.Names}}\t{{.Status}}\t{{.Image}}'

  reset:
    desc: Reset everything (destroy lab + clean Docker resources)
    cmds:
      - task: lab:destroy
      - echo "💥 Removing all containers and images..."
      - docker rm -f $(docker ps -a -q) 2>/dev/null || true
      - docker rmi -f $(docker images -q) 2>/dev/null || true
      - docker volume rm splunk-ws 2>/dev/null || true
      - echo "✅ Reset complete!"

  shell:
    desc: "Shell into container (usage: task shell -- container-name)"
    cmds:
      - docker exec -it {{.CLI_ARGS}} bash

  # === REMOTE ACCESS ===
  twingate:start:
    desc: "Start Twingate connector for external access"
    cmds:
      - |
        if [ -f .env ]; then
          export $(grep -v '^#' .env | xargs)
        fi
        if [ -n "$TWINGATE_NETWORK" ] && [ -n "$TWINGATE_ACCESS_TOKEN" ]; then
          echo "🚀 Starting Twingate connector..."
          docker run -d \
            --sysctl net.ipv4.ping_group_range="0 2147483647" \
            --network splunk-test-network \
            --env TWINGATE_NETWORK="$TWINGATE_NETWORK" \
            --env TWINGATE_ACCESS_TOKEN="$TWINGATE_ACCESS_TOKEN" \
            --env TWINGATE_REFRESH_TOKEN="$TWINGATE_REFRESH_TOKEN" \
            --env TWINGATE_LABEL_HOSTNAME="`hostname`" \
            --env TWINGATE_LABEL_DEPLOYED_BY="docker" \
            --name "twingate-connector" \
            --restart=unless-stopped \
            --pull=always \
            twingate/connector:1
          echo "✅ Twingate connector started!"
          echo "📋 Check status: docker logs twingate-connector"
          echo "🌐 Connector connected to splunk-test-network for container access"
        else
          echo "⚠️  TWINGATE_NETWORK or TWINGATE_ACCESS_TOKEN not set, skipping Twingate setup"
        fi

  twingate:stop:
    desc: "Stop Twingate connector"
    cmds:
      - echo "🛑 Stopping Twingate connector..."
      - docker stop twingate-connector || true
      - docker rm twingate-connector || true
      - echo "✅ Twingate connector stopped!"

  twingate:status:
    desc: "Show Twingate connector status"
    cmds:
      - docker ps --filter name=twingate-connector

  # === WORKFLOWS ===
  workflow:full:
    desc: Complete end-to-end workflow (lab → day0 → day1)
    cmds:
      - task: lab:test
      - task: day0:test
      - task: day1:test
      - echo "🎉 Complete end-to-end workflow finished!"

  workflow:quick:
    desc: Quick development cycle (lab + day0 only)
    cmds:
      - task: lab:test
      - task: day0:test
      - echo "✅ Quick development cycle complete!"

  # === DEVELOPMENT UTILITIES ===
  dev:shell:
    desc: Interactive shell in molecule-runner container
    cmds:
      - |
        docker run --rm -it \
          -v /var/run/docker.sock:/var/run/docker.sock \
          -v {{.PROJECT_ROOT}}:/workspace \
          -w /workspace/testing \
          -e HOST_PROJECT_DIRECTORY={{.PROJECT_ROOT}} \
          molecule-runner:latest \
          bash

  dev:cleanup:
    desc: Clean up Docker resources (containers, volumes, networks)
    cmds:
      - echo "🧹 Cleaning up Docker resources..."
      - docker system prune -f
      - docker volume prune -f
      - docker network prune -f
      - echo "✅ Cleanup complete!"